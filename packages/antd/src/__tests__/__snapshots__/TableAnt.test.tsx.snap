// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TableAnt should render a table with content by default 1`] = `
<Fragment>
  <Table
    bordered={false}
    className=""
    columns={
      Array [
        Object {
          "column": "email",
          "dataIndex": "email",
          "key": "email",
          "render": [Function],
          "sorter": true,
          "title": "E-Mail",
        },
        Object {
          "column": "fullName",
          "dataIndex": "fullName",
          "key": "fullName",
          "render": [Function],
          "sorter": true,
          "title": "Full Name",
        },
        Object {
          "column": "createdAt",
          "dataIndex": "createdAt",
          "key": "createdAt",
          "render": [Function],
          "sorter": true,
          "title": "Joined",
        },
      ]
    }
    dataSource={
      Array [
        Object {
          "_id": "1",
          "createdAt": "2018-01-01",
          "email": "john@doe.com",
          "fullName": "John Doe",
          "key": "0",
        },
        Object {
          "_id": "2",
          "createdAt": "2018-05-01",
          "email": "johanna@yahoo.com",
          "fullName": "Johanna Doe",
          "key": "1",
        },
        Object {
          "_id": "3",
          "createdAt": "2018-10-01",
          "email": "jake@gmail.com",
          "fullName": "Jake Doe",
          "key": "2",
        },
        Object {
          "_id": "4",
          "createdAt": "2017-13-07",
          "email": "max@mustermann.com",
          "fullName": "Max Mustermann",
          "key": "3",
        },
      ]
    }
    indentSize={20}
    loading={false}
    locale={Object {}}
    onChange={[Function]}
    prefixCls="ant-table"
    rowKey="key"
    showHeader={true}
    size="default"
    useFixedHeader={false}
  />
</Fragment>
`;

exports[`TableAnt should render a table with search field and pagination 1`] = `
<Fragment>
  <TextSearchAnt
    enterButton="Search"
    onSearch={[Function]}
    operation={
      bound TextImpl {
        "_errors": Array [],
        "_isSaving": false,
        "_value": undefined,
        "constructor": [Function],
        "doClearErrors": [Function],
        "doGetValue": [Function],
        "doOnValidate": [Function],
        "doPlaceholder": [Function],
        "doSetValue": [Function],
        "domId": "table_search-search_field",
        "getDisabled": [Function],
        "getErrors": [Function],
        "getHelp": [Function],
        "getInitialValue": [Function],
        "getInvisible": [Function],
        "getLabel": [Function],
        "getReadonly": [Function],
        "id": "TableSearch.searchField",
        "impl": Object {
          "id": "TableSearch.searchField",
          "initialValue": [Function],
          "placeholder": "Search...",
        },
        "setError": [Function],
        Symbol(mobx did run lazy initializers): true,
        Symbol(mobx administration): ObservableObjectAdministration$$1 {
          "defaultEnhancer": [Function],
          "keysAtom": Atom$$1 {
            "diffValue": 0,
            "isBeingObserved": false,
            "isPendingUnobservation": false,
            "lastAccessedBy": 0,
            "lowestObserverState": 2,
            "name": "TextImpl@143.keys",
            "observers": Set {},
          },
          "name": "TextImpl@143",
          "target": [Circular],
          "values": Map {
            "_errors" => Array [],
            "label" => undefined,
            "disabled" => false,
            "enabled" => true,
            "invisible" => false,
            "readOnly" => false,
            "help" => undefined,
            "errors" => Array [],
            "error" => undefined,
            "hasErrors" => false,
            "_value" => undefined,
            "_isSaving" => false,
            "inputType" => undefined,
            "value" => "",
            "placeholder" => "Search...",
            "required" => undefined,
            "isInitialValue" => true,
            "control" => "input",
          },
        },
      }
    }
    required={true}
    style={
      Object {
        "marginBottom": "1.5em",
      }
    }
  />
  <Table
    bordered={false}
    className=""
    columns={
      Array [
        Object {
          "column": "email",
          "dataIndex": "email",
          "key": "email",
          "render": [Function],
          "sorter": true,
          "title": "E-Mail",
        },
        Object {
          "column": "fullName",
          "dataIndex": "fullName",
          "key": "fullName",
          "render": [Function],
          "sorter": true,
          "title": "Full Name",
        },
        Object {
          "column": "createdAt",
          "dataIndex": "createdAt",
          "key": "createdAt",
          "render": [Function],
          "sorter": true,
          "title": "Joined",
        },
      ]
    }
    dataSource={
      Array [
        Object {
          "_id": "1",
          "createdAt": "2018-01-01",
          "email": "john@doe.com",
          "fullName": "John Doe",
          "key": "0",
        },
        Object {
          "_id": "2",
          "createdAt": "2018-05-01",
          "email": "johanna@yahoo.com",
          "fullName": "Johanna Doe",
          "key": "1",
        },
        Object {
          "_id": "3",
          "createdAt": "2018-10-01",
          "email": "jake@gmail.com",
          "fullName": "Jake Doe",
          "key": "2",
        },
        Object {
          "_id": "4",
          "createdAt": "2017-13-07",
          "email": "max@mustermann.com",
          "fullName": "Max Mustermann",
          "key": "3",
        },
      ]
    }
    indentSize={20}
    loading={false}
    locale={Object {}}
    onChange={[Function]}
    pagination={
      Object {
        "pageSizeOptions": Array [
          "10",
          "25",
          "50",
          "100",
        ],
        "showQuickJumper": true,
        "showSizeChanger": true,
        "total": 4,
      }
    }
    prefixCls="ant-table"
    rowKey="key"
    showHeader={true}
    size="default"
    useFixedHeader={false}
  />
</Fragment>
`;

exports[`TableAnt should render a table with setupColumn set 1`] = `
<Fragment>
  <Table
    bordered={false}
    className=""
    columns={
      Array [
        Object {
          "column": "email",
          "dataIndex": "email",
          "key": "email",
          "render": [Function],
          "sorter": true,
          "title": "E-Mail",
        },
        Object {
          "column": "fullName",
          "dataIndex": "fullName",
          "key": "fullName",
          "render": [Function],
          "sorter": true,
          "title": "Full Name",
        },
        Object {
          "column": "createdAt",
          "dataIndex": "createdAt",
          "key": "createdAt",
          "render": [Function],
          "sorter": true,
          "title": "Joined",
        },
      ]
    }
    dataSource={
      Array [
        Object {
          "_id": "1",
          "createdAt": "2018-01-01",
          "email": "john@doe.com",
          "fullName": "John Doe",
          "key": "0",
        },
        Object {
          "_id": "2",
          "createdAt": "2018-05-01",
          "email": "johanna@yahoo.com",
          "fullName": "Johanna Doe",
          "key": "1",
        },
        Object {
          "_id": "3",
          "createdAt": "2018-10-01",
          "email": "jake@gmail.com",
          "fullName": "Jake Doe",
          "key": "2",
        },
        Object {
          "_id": "4",
          "createdAt": "2017-13-07",
          "email": "max@mustermann.com",
          "fullName": "Max Mustermann",
          "key": "3",
        },
      ]
    }
    indentSize={20}
    loading={false}
    locale={Object {}}
    onChange={[Function]}
    prefixCls="ant-table"
    rowKey="key"
    setupColumn={[Function]}
    showHeader={true}
    size="default"
    useFixedHeader={false}
  />
</Fragment>
`;
